// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Docs developer",
            "url": "https://t.me/KlenoviySirop",
            "email": "KlenoviySir@yandex.ru"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Accepts token from vendor which we process and returning pair of tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Sign in or sign up via Apple or Google",
                "parameters": [
                    {
                        "enum": [
                            "apple",
                            "google"
                        ],
                        "type": "string",
                        "description": "Vendor which is providing authorization",
                        "name": "vendor",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.Response"
                        }
                    }
                }
            }
        },
        "/auth/email/validate": {
            "post": {
                "description": "Validating user's email with take message on email and writing code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Validating user's email",
                "parameters": [
                    {
                        "description": "Data for validation by email from app",
                        "name": "code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EmailValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EmailValidateResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign/in": {
            "post": {
                "description": "Authorization and get access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Sign in",
                "parameters": [
                    {
                        "description": "Authorization data from user",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SignInResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign/up": {
            "post": {
                "description": "Sign up with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Sign up with email",
                "parameters": [
                    {
                        "description": "Authorization data from user",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SignUpResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.Response": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "internal_code": {
                    "type": "integer"
                }
            }
        },
        "model.BusinessDataLogic": {
            "type": "object",
            "required": [
                "inn"
            ],
            "properties": {
                "economic_activity": {
                    "type": "string",
                    "example": "Производство"
                },
                "inn": {
                    "type": "string",
                    "example": "7707083893"
                },
                "name": {
                    "type": "string",
                    "example": "ООО ИНФАНТЕМ"
                },
                "website": {
                    "type": "string",
                    "example": "infantem.tech"
                }
            }
        },
        "model.EmailValidateRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                }
            }
        },
        "model.EmailValidateResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "internal_code": {
                    "type": "integer"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "model.PersonalDataLogic": {
            "type": "object",
            "required": [
                "full_name"
            ],
            "properties": {
                "full_name": {
                    "type": "string",
                    "example": "Иванов Иван Иванович"
                },
                "geographic": {
                    "type": "object",
                    "properties": {
                        "city": {
                            "type": "string",
                            "example": "Москва"
                        },
                        "country": {
                            "type": "string",
                            "example": "Российская Федерация"
                        }
                    }
                },
                "position": {
                    "type": "string",
                    "example": "Старший менеджер по инвестициям"
                }
            }
        },
        "model.RegistrationDataLogic": {
            "type": "object",
            "required": [
                "email",
                "password",
                "repeated_password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@mail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "1234qwerty!"
                },
                "repeated_password": {
                    "type": "string",
                    "example": "1234qwerty!"
                }
            }
        },
        "model.SignInRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.SignInResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "internal_code": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "model.SignUpRequest": {
            "type": "object",
            "properties": {
                "auth_data": {
                    "description": "server.Params",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RegistrationDataLogic"
                        }
                    ]
                },
                "business_data": {
                    "$ref": "#/definitions/model.BusinessDataLogic"
                },
                "personal_data": {
                    "$ref": "#/definitions/model.PersonalDataLogic"
                }
            }
        },
        "model.SignUpResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "internal_code": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "core.ldt2023.infantem.tech",
	BasePath:         "",
	Schemes:          []string{"https"},
	Title:            "Core backend app for Leaders of Digital Transformation",
	Description:      "JWT token in authorization bearer",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
